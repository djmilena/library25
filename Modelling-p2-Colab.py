# -*- coding: utf-8 -*-
"""Library25 - Modelling with TabPFN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yvuE8vkhZm0iDZPUfhy8mPWRJlTDRQSR
"""

!pip install tabpfn

from sklearn.model_selection import StratifiedKFold, RandomizedSearchCV, cross_val_predict, train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import f1_score, precision_score, recall_score, average_precision_score, make_scorer, classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, BaggingClassifier, AdaBoostClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from imblearn.pipeline import Pipeline as ImbPipeline
from imblearn.over_sampling import SMOTE
import pandas as pd
import numpy as np

from tabpfn import TabPFNClassifier
import torch

import warnings
with warnings.catch_warnings():
    warnings.simplefilter("ignore")

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/datasets/library-data/model_ready_dataset.csv')

print(df.columns)
df.shape

df['is_late'].value_counts()

X = df.drop(columns=['is_late'])
y = df['is_late']

n_iter=25
n_splits=5
seed=25

skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)


X_scaled = StandardScaler().fit_transform(X)
tabpfn_model = TabPFNClassifier(device='cuda' if torch.cuda.is_available() else 'cpu')
tabpfn_model.fit(X_scaled, y)

y_pred = cross_val_predict(tabpfn_model, X_scaled, y, cv=skf, method='predict')
y_proba_all = cross_val_predict(tabpfn_model, X_scaled, y, cv=skf, method='predict_proba')

if y_proba_all.shape[1] == 2:
    y_proba = y_proba_all[:, 1]
else:
    y_proba = np.max(y_proba_all, axis=1)

f1 = f1_score(y, y_pred)
precision = precision_score(y, y_pred)
recall = recall_score(y, y_pred)
pr_auc = average_precision_score(y, y_proba)

print(f1, pr_auc, recall, precision)



